#include <string.h>

#include <cstdlib>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

class Page {
 private:
  std::vector<std::pair<size_t, std::string> > choices;
  std::vector<std::string> contents;
  char type;  // has a
  size_t pageNum;

 public:
  void addChoices(size_t & des, std::string & s) {
    //std::cout << s << std::endl;
    std::pair<size_t, std::string> pr = std::make_pair(des, s);
    choices.push_back(pr);
  }

  void addContents(std::string & line) {
    //std::cout << line << std::endl;
    contents.push_back(line);
  }

  void setType(char type_str) { type = type_str; }

  char getType() { return type; }

  void setPageNum(size_t & num) { pageNum = num; }

  size_t getPageNum() { return pageNum; }

  void printContents() {
    std::cout << "Page " << pageNum << std::endl;
    std::cout << "==========" << std::endl;
    for (size_t i = 0; i < contents.size(); i++) {
      std::cout << contents[i] << std::endl;
    }
    std::cout << std::endl;
  }

  void printChoices() {
    std::cout << "What would you like to do?" << std::endl;
    std::cout << std::endl;
    for (size_t i = 0; i < choices.size(); i++) {
      std::cout << " " << i << ". " << choices[i].second << std::endl;
    }
  }
};

class Story {
 private:
  std::vector<Page *> pages;

 public:
  void addBlankPage(Page * pagePointer) { pages.push_back(pagePointer); }

  Page * operator[](size_t index) {
    // what if the param is the same name of member
    return pages[index];
    // i can not return page*&
  }

  bool isPageNum(size_t num) {
    // in here, I can not use std::find
    return num < pages.size();
  }

  void printStory() {
    for (size_t i = 0; i < pages.size(); i++) {
      Page * pg = pages[i];
      char type = pg->getType();
      // printContents
      pg->printContents();
      if (type == 'N') {
        // print choices
        pg->printChoices();
      }
      else if (type == 'W') {
        // print win
        std::cout << "Congratulations! You have won. Hooray!" << std::endl;
      }
      else {
        // print lose
        std::cout << "Sorry, you have lost. Better luck next time!" << std::endl;
      }
    }
  }
};

std::vector<char *> readStory(std::istream & is, Story & s1);
void readPage(std::istream & is, Story & s1, size_t pageNum);
